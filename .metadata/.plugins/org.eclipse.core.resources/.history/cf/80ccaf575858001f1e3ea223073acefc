package Binary_Trees;
import java.util.*;

class Practice_BST{
	
	static Node root;
	public class Node{
		private int value;
		private Node Left;
		private Node Right;
		
		Node(int data){
			this.value=data;
		}
		int GetValue() {
			return this.value;
		
		}
	}
	
	 void insert(int index,int[] arr) {
		 if(root==null) {
			 Node newNode=new Node(arr[index]);
			 root=newNode;
		 }
		 insert(root,index+1,arr);
	 }
	 void insert(Node a,int index,int[] arr) {
		while(index<arr.length) {
		 if(a==null) {
			 Node newNode=new Node(arr[index]);
			 a=newNode;
			 index=index+1;
			
			 
		 }
		 
		 if(arr[index]<a.value) {
			 insert(a.Left,index,arr);
			 
		 }
		 if(arr[index]>a.value) {
			 insert(a.Right,index,arr);
			 
		 }
	
		}
		return;
	 }
	 
	 
	 
	 void display(Node node) {
		 if(node==null) {
			 return;
		 }
		 System.out.print(node.GetValue());
		 display(node.Left);
		 display(node.Right);
	 } 
	 
	
	
	public static void main(String[] args) {
		Practice_BST BST=new Practice_BST();
		int[] nums= {7,8,11,3,45,19,3};
		BST.insert(0,nums);
		BST.display(root);
		
	}
	
	

	
}
	
		
		/*public Node insertion(int value) {
			root=insertion(nums,root);
			
		}
		
		public Node insertion(int data,Node node) {
			if(node==null) {
				Node newNode=new Node(data);
				node=newNode;
				return node;
			}
			
			if(data<node.value) {
				node.Left=insertion(data,node.Left);
			}
			if(data>node.value) {
				node.Right=insertion(data,node.Right);
			}
			return node;
		}
		
		*/
		
		
		